{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/phuctran/Workspace/Private/ReactLessons/NextJS/02-BiggerProject/pages/[meetupId]/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRouter } from \"next/router\";\nimport { ObjectId } from \"mongodb\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetailPage = props => {\n  // const router = useRouter();\n  // const { meetupId } = router.query;\n  // const meetup = DUMMY_MEETUPS.find((meetup) => meetup.id === meetupId);\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    meetup: props.meetupData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 4\n  }, this);\n};\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(\"mongodb+srv://vinhphucit:Annihilator.123...@cluster0.bou8u7f.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n};\nexport const getStaticProps = async context => {\n  // get meetupId from context.params\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://vinhphucit:Annihilator.123...@cluster0.bou8u7f.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetup = await meetupsCollection.findOne({\n    _id: new ObjectId(meetupId)\n  });\n  client.close(); // fetch data from an API\n\n  return {\n    props: {\n      meetupData: _objectSpread(_objectSpread({}, meetup), {}, {\n        id: meetup._id.toString()\n      })\n    },\n    revalidate: 10\n  };\n};\nexport default MeetupDetailPage;","map":{"version":3,"sources":["/Users/phuctran/Workspace/Private/ReactLessons/NextJS/02-BiggerProject/pages/[meetupId]/index.js"],"names":["useRouter","ObjectId","MongoClient","MeetupDetail","MeetupDetailPage","props","meetupData","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","findOne","close","id","revalidate"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AACA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAClC;AACA;AACA;AAEA,sBACC,QAAC,YAAD;AAAc,IAAA,MAAM,EAAEA,KAAK,CAACC;AAA5B;AAAA;AAAA;AAAA;AAAA,UADD;AAGD,CARD;;AAUA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,QAAMC,MAAM,GAAG,MAAMN,WAAW,CAACO,OAAZ,CACnB,8GADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AACA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACL,GAAP,CAAWQ,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD,CAbM;AAeP,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC/C;AACA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMd,MAAM,GAAG,MAAMN,WAAW,CAACO,OAAZ,CACnB,8GADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMQ,MAAM,GAAG,MAAMT,iBAAiB,CAACe,OAAlB,CAA0B;AAAEX,IAAAA,GAAG,EAAE,IAAId,QAAJ,CAAaqB,QAAb;AAAP,GAA1B,CAArB;AACAd,EAAAA,MAAM,CAACmB,KAAP,GAV+C,CAY/C;;AACA,SAAO;AACLtB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,kCACLc,MADK;AAERQ,QAAAA,EAAE,EAAER,MAAM,CAACL,GAAP,CAAWQ,QAAX;AAFI;AADL,KADF;AAOLM,IAAAA,UAAU,EAAE;AAPP,GAAP;AASD,CAtBM;AAwBP,eAAezB,gBAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport { ObjectId } from \"mongodb\"; \nimport { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nconst MeetupDetailPage = (props) => {\n  // const router = useRouter();\n  // const { meetupId } = router.query;\n  // const meetup = DUMMY_MEETUPS.find((meetup) => meetup.id === meetupId);\n  \n  return (\n   <MeetupDetail meetup={props.meetupData}/>\n  );\n};\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://vinhphucit:Annihilator.123...@cluster0.bou8u7f.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n}; \n\nexport const getStaticProps = async (context) => {\n  // get meetupId from context.params\n  const meetupId = context.params.meetupId;\n  \n  const client = await MongoClient.connect(\n    \"mongodb+srv://vinhphucit:Annihilator.123...@cluster0.bou8u7f.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetup = await meetupsCollection.findOne({ _id: new ObjectId(meetupId) })\n  client.close();\n\n  // fetch data from an API\n  return {\n    props: {\n      meetupData: {\n        ...meetup,\n        id: meetup._id.toString(),\n      },\n    },\n    revalidate: 10,\n  };\n};\n\nexport default MeetupDetailPage;\n"]},"metadata":{},"sourceType":"module"}