{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/phuctran/Workspace/Private/ReactLessons/NextJS/02-BiggerProject/pages/[meetupId]/index.js\";\nimport { useRouter } from \"next/router\";\nimport { ObjectId } from \"mongodb\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetailPage = props => {\n  // const router = useRouter();\n  // const { meetupId } = router.query;\n  // const meetup = DUMMY_MEETUPS.find((meetup) => meetup.id === meetupId);\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    meetup: props.meetupData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 4\n  }, this);\n};\n\nexport const getStaticPaths = async () => {\n  return {\n    fallback: false,\n    paths: DUMMY_MEETUPS.map(meetup => ({\n      params: {\n        meetupId: meetup.id\n      }\n    }))\n  };\n};\nexport const getStaticProps = async context => {\n  // get meetupId from context.params\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://vinhphucit:Annihilator.123...@cluster0.bou8u7f.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close(); // fetch data from an API\n\n  return {\n    props: {\n      meetupData: meetup\n    },\n    revalidate: 10\n  };\n};\nexport default MeetupDetailPage;","map":{"version":3,"sources":["/Users/phuctran/Workspace/Private/ReactLessons/NextJS/02-BiggerProject/pages/[meetupId]/index.js"],"names":["useRouter","ObjectId","MongoClient","MeetupDetail","MeetupDetailPage","props","meetupData","getStaticPaths","fallback","paths","DUMMY_MEETUPS","map","meetup","params","meetupId","id","getStaticProps","context","client","connect","db","meetupsCollection","collection","findOne","_id","close","revalidate"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AACA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAClC;AACA;AACA;AAEA,sBACC,QAAC,YAAD;AAAc,IAAA,MAAM,EAAEA,KAAK,CAACC;AAA5B;AAAA;AAAA;AAAA;AAAA,UADD;AAGD,CARD;;AAUA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEC,aAAa,CAACC,GAAd,CAAmBC,MAAD,KAAa;AACpCC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAEF,MAAM,CAACG;AADX;AAD4B,KAAb,CAAlB;AAFF,GAAP;AAQD,CATM;AAWP,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC/C;AACA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMI,MAAM,GAAG,MAAMhB,WAAW,CAACiB,OAAZ,CACnB,8GADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMV,MAAM,GAAG,MAAMS,iBAAiB,CAACE,OAAlB,CAA0B;AAAEC,IAAAA,GAAG,EAAEvB,QAAQ,CAACa,QAAD;AAAf,GAA1B,CAArB;AACAI,EAAAA,MAAM,CAACO,KAAP,GAV+C,CAY/C;;AACA,SAAO;AACLpB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAEM;AADP,KADF;AAILc,IAAAA,UAAU,EAAE;AAJP,GAAP;AAMD,CAnBM;AAqBP,eAAetB,gBAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport { ObjectId } from \"mongodb\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nconst MeetupDetailPage = (props) => {\n  // const router = useRouter();\n  // const { meetupId } = router.query;\n  // const meetup = DUMMY_MEETUPS.find((meetup) => meetup.id === meetupId);\n  \n  return (\n   <MeetupDetail meetup={props.meetupData}/>\n  );\n};\n\nexport const getStaticPaths = async () => {\n  return {\n    fallback: false,\n    paths: DUMMY_MEETUPS.map((meetup) => ({\n      params: {\n        meetupId: meetup.id,\n      },\n    })),\n  };\n}; \n\nexport const getStaticProps = async (context) => {\n  // get meetupId from context.params\n  const meetupId = context.params.meetupId;\n  \n  const client = await MongoClient.connect(\n    \"mongodb+srv://vinhphucit:Annihilator.123...@cluster0.bou8u7f.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetup = await meetupsCollection.findOne({ _id: ObjectId(meetupId) })\n  client.close();\n\n  // fetch data from an API\n  return {\n    props: {\n      meetupData: meetup,\n    },\n    revalidate: 10,\n  };\n};\n\nexport default MeetupDetailPage;\n"]},"metadata":{},"sourceType":"module"}